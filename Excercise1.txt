1>WAP to Check Prime Number using loop?

->
#include <iostream>
using namespace std;

int main() {
    int i, n;
    bool isPrime = true;

    cout << "Enter a positive integer: ";
    cin >> n;

   
    if (n == 0 || n == 1) {
        isPrime = false;
    }
    else {
        for (i = 2; i <= n / 2; ++i) {
            if (n % i == 0) {
                isPrime = false;
                break;
            }
        }
    }
    if (isPrime)
        cout << n << " is a prime number";
    else
        cout << n << " is not a prime number";

    return 0;
}

///////////////////////////////////////////////

2> WAP to Check if a Number is Positive or Negative

->

#include<iostream>
using namespace std;
int main ()
{
    int num;
    cout << "Enter the number: ";
    cin >> num;
    if (num >= 0)
        cout << num << " is a positive number.";
    else 
        cout << num << " is a negative number.";
    return 0;
}

/////////////////////////////////////////////////


3>WAP to Find Factorial of a number
->

#include <iostream>  
using namespace std;  
int main()  
{  
   int i,fact=1,num;    
  cout<<"Enter the Number: ";    
  cin>>num;    
  for(i=1;i<=num;i++)
 {    
      fact=fact*i;    
  }    
  cout<<"Factorial of " <<num<<" is: "<<fact<<endl;  
  return 0;  
}  

//////////////////////////////////////////////

4>WAP to Display Fibonacci series

->
#include <iostream>  
using namespace std;  
int main() 
{  
  int a=0,b=1,c,i,num;    
 cout<<"Enter the number of elements: ";    
 cin>>num;    
 cout<<a<<" "<<b<<" ";    
 for(i=2;i<num;++i) 
 {    
  c=a+b;    
  cout<<c<<" ";    
  a=b;    
  b=c;    
 }    
   return 0;  
} 

//////////////////////////////////////////////////

5> WAP to Display Fibonacci series up to a given
number (instead of terms)
Input: 20
Output:0 + 1 + 1 + 2 + 3 + 5 + 8 + 13
->



///////////////////////////////////////////////////

6>WAP to Display Uppercased A to Z

->

#include <iostream> 
using namespace std; 
void uppercase() 
{  
   
    for (int c = 65; c <= 90; ++c) 
        cout << c << " "; 
        cout << endl; 
} 
  

int main() 
{ 
  
    cout << "Uppercase Alphabets" << endl; 
    uppercase(ch); 
  
      return 0; 
} 

////////////////////////////////////////////
7>WAP to Swap two numbers using temporary variable
->
#include <iostream>
using namespace std;

int main()
{
    int num1, num2, temp;
    cout<<"Enter 1st Number: "; 
    cin>>num1;
    cout<<"Enter 2nd Number: "; 
    cin>>num2;

   
    cout<<"Before Swapping: First Number: "<<num1<<"       Second Number: "<<num2;
    temp=num1;
    num1=num2;
    num2=temp;

   
    cout<<"\nAfter Swapping: First Number: "<<num1<<"     Second Number: "<<num2;
    return 0;
}
//////////////////////////////////////////////////
8>WAP to Swap two numbers without using temporary
variable
->

#include <iostream>  
using namespace std;  
int main()  
{  
int a, b;  
cout<<"Enter two numbers:"<<endl;
cin>>a>>b;    
cout<<"Before swap a= "<<a<<" b= "<<b<<endl;      
a=a+b;    
b=a-b;     
a=a-b;     
cout<<"After swap a= "<<a<<" b= "<<b<<endl;      
return 0;  
}  
//////////////////////////////////////////////////////

9>WAP to Check whether an alphabet is vowel or
consonant
->
#include <iostream>
using namespace std;
int main() {
   char c = 'a';
   if (c == 'a' || c == 'e' ||
    c == 'i' || c == 'o' || c == 'u' )
   cout <<c<< " is a Vowel" << endl;
   else
   cout <<c<< " is a Consonant" << endl;
   return 0;
}

//////////////////////////////////////////////////
10>WAP to Find the largest number among the given
numbers
->

#include <iostream>
using namespace std;

int main() {    
    float n1, n2, n3;

    cout << "Enter three numbers: ";
    cin >> n1 >> n2 >> n3;

    if(n1 >= n2 && n1 >= n3)
        cout << "Largest number: " << n1;

    if(n2 >= n1 && n2 >= n3)
        cout << "Largest number: " << n2;
    
    if(n3 >= n1 && n3 >= n2)
        cout << "Largest number: " << n3;
  
    return 0;
}
//////////////////////////////////////////////////
11>
WAP to Reverse a Number

->
#include <iostream>
using namespace std;

int main()
 {
    int n, revNum = 0, remainder;

    cout << "Enter the number: ";
    cin >> n;

    while(n != 0) 
   {
        remainder = n%10;
        revNum = revNum*10 + remainder;
        n /= 10;
    }

    cout << "Reversed Number = " << revNum;

    return 0;
}
///////////////////////////////////////////////
12>WAP to Program to Check Palindrome
->
#include <iostream>
using namespace std;

int main()
{
     int n, num, digit, rev = 0;

     cout << "Enter a number: ";
     cin >> num;

     n = num;

     do
     {
         digit = num % 10;
         rev = (rev * 10) + digit;
         num = num / 10;
     } while (num != 0);

     
     if (n == rev)
         cout << " The number is a palindrome.";
     else
         cout << " The number is not a palindrome.";

    return 0;
}
//////////////////////////////////////////////
13>WAP to Program to Check Prime Number
->
#include <iostream>  
using namespace std;  
int main()  
{  
  int n, i, m=0, flag=0;  
  cout << "Enter the Number to check Prime: ";  
  cin >> n;  
  m=n/2;  
  for(i = 2; i <= m; i++)  
  {  
      if(n % i == 0)  
      {  
          cout<<"Number is not Prime."<<endl;  
          flag=1;  
          break;  
      }  
  }  
  if (flag==0)  
      cout << "Number is Prime."<<endl;  
  return 0;  
}  

////////////////////////////////////////////////////
14>WAP to Display Prime Numbers Between two
Intervals

->
#include <iostream>
using namespace std;

int main() {
    int low, high, i;
    bool isPrime = true;

    cout << "Enter two numbers: ";
    cin >> low >> high;

    cout << "\nPrime numbers between " << low << " and " << high << " are: " << endl;

    while (low < high) {
        isPrime = true;
        if (low == 0 || low == 1) {
            isPrime = false;
        }
        else {
            for (i = 2; i <= low / 2; ++i) {
                if (low % i == 0) {
                    isPrime = false;
                    break;
                }
            }
        }
        
        if (isPrime)
            cout << low << " ";

        ++low;
    }

    return 0;
}
//////////////////////////////////////////////////
15>WAP to Check Armstrong Number for 3 digit
number
->

#include <iostream>
using namespace std;

int main() {
    int num, originalNum, remainder, result = 0;
    cout << "Enter a three-digit integer: ";
    cin >> num;
    originalNum = num;

    while (originalNum != 0) {
        // remainder contains the last digit
        remainder = originalNum % 10;
        
        result += remainder * remainder * remainder;
        
        // removing last digit from the orignal number
        originalNum /= 10;
    }

    if (result == num)
        cout << num << " is an Armstrong number.";
    else
        cout << num << " is not an Armstrong number.";

    return 0;
}
//////////////////////////////////////////////////
16>WAP to Check Armstrong Number for n digit
number
->

#include <iostream>  
using namespace std;  
int main()  
{  
int n,r,sum=0,temp;    
cout<<"Enter the Number=  ";    
cin>>n;    
temp=n;    
while(n>0)    
{    
r=n%10;    
sum=sum+(r*r*r);    
n=n/10;    
}    
if(temp==sum)    
cout<<"Armstrong Number."<<endl;    
else    
cout<<"Not Armstrong Number."<<endl;   
return 0;  
}  

//////////////////////////////////////////////////////

17>WAP to Armstrong Numbers Between Two
Integers

->
#include <iostream>
using namespace std;

int main()
{
  int num1, num2, i, num, digit, sum;

  cout << "Enter first number: ";
  cin >> num1;

  cout << "Enter second number: ";
  cin >> num2;

  cout << "Armstrong numbers between " << num1 << " and " << num2 << " are: " << endl;
  for(i = num1; i <= num2; i++)
  {
        sum = 0;
        num = i;

        for(; num > 0; num /= 10)
        {
            digit = num % 10;
            sum = sum + digit * digit * digit;
        }

        if(sum == i)
        {
            cout << i << endl;
        }
  }

  return 0;
}
///////////////////////////////////////////
18>WAP to Prime Numbers Between Two Integers
->

#include <iostream>
using namespace std;

int checkPrimeNumber(int);

int main() {
    int n1, n2;
    bool flag;

    cout << "Enter two positive integers: ";
    cin >> n1 >> n2;

    
    if (n1 > n2) {
      n2 = n1 + n2;
      n1 = n2 - n1;
      n2 = n2 - n1;
    }

    cout << "Prime numbers between " << n1 << " and " << n2 << " are: ";

    for(int i = n1+1; i < n2; ++i) 
{
       
        flag = checkPrimeNumber(i);

        if(flag)
            cout << i << " ";
    }

    return 0;
}


int checkPrimeNumber(int n) 
{
    bool isPrime = true;

    // 0 and 1 are not prime numbers
    if (n == 0 || n == 1) {
        isPrime = false;
    }
    else {
        for(int j = 2; j <= n/2; ++j) {
            if (n%j == 0) {
                isPrime = false;
                break;
            }
        }
    }

    return isPrime;
}
/////////////////////////////////////////////////
19>WAP to Represent a number as Sum of Two Prime
Numbers
->


#include <iostream>
using namespace std;

bool checkPrime(int n);

int main() {
    int n, i;
    bool flag = false;

    cout << "Enter a positive  integer: ";
    cin >> n;

    for(i = 2; i <= n/2; ++i) 
{
        if (checkPrime(i)) 
       {
            if (checkPrime(n - i)) 
            {
                cout << n << " = " << i << " + " << n-i << endl;
                flag = true;
            }
        }
    }

    if (!flag)
      cout << n << " can't be expressed as sum of two prime numbers.";

    return 0;
}


bool checkPrime(int n)
{
    int i;
    bool isPrime = true;

    // 0 and 1 are not prime numbers
    if (n == 0 || n == 1) {
        isPrime = false;
    }
    else {
        for(i = 2; i <= n/2; ++i) {
            if(n % i == 0) {
                isPrime = false;
                break;
            }
        }
    }

    return isPrime;
}
//////////////////////////////////////////////
20>WAP to Convert Decimal to Octal

->
#include <iostream>
#include <cmath>
using namespace std;

int decimalToOctal(int decimalNumber);

int main()
{
   int decimalNumber;
   cout << "Enter a decimal number: ";
   cin >> decimalNumber;
   cout << decimalNumber << " in decimal = " << decimalToOctal(decimalNumber) << " in octal";
   
   return 0;
}


int decimalToOctal(int decimalNumber)
{
    int rem, i = 1, octalNumber = 0;
    while (decimalNumber != 0)
    {
        rem = decimalNumber % 8;
        decimalNumber /= 8;
        octalNumber += rem * i;
        i *= 10;
    }
    return octalNumber;
}
//////////////////////////////////////////
21>WAP to Convert Octal to Decimal
->

#include <cmath>
using namespace std;

int octalToDecimal(int octalNumber);

int main()
{
   int octalNumber;
   cout << "Enter an octal number: ";
   cin >> octalNumber;
   cout << octalNumber << " in octal = " << octalToDecimal(octalNumber) << " in decimal";
   
   return 0;
}


int octalToDecimal(int octalNumber)
{
    int decimalNumber = 0, i = 0, rem;
    while (octalNumber != 0)
    {
        rem = octalNumber % 10;
        octalNumber /= 10;
        decimalNumber += rem * pow(8, i);
        ++i;
    }
    return decimalNumber;
}
////////////////////////////////////////////////
22>WAP to convert binary number to decimal
->

#include <iostream>
#include <cmath>

using namespace std;

int BinaryToDecimal(long long);

int main()
{
    long long n;

    cout << "Enter a binary number: ";
    cin >> n;
 
    cout << n << " in binary = " <<BinaryToDecimal(n) << "in decimal";
    return 0;
}

int BinaryToDecimal(long long n)
{
    int decNum = 0, i = 0, rem;
    while (n!=0)
    {
        rem = n%10;
        n /= 10;
        decNum += rem*pow(2,i);
        ++i;
    }
    return decNum;
}
//////////////////////////////////////////////////
23>WAP to convert decimal number to binary
->
#include <iostream>
#include <cmath>
using namespace std;

long long convertDecimalToBinary(int);

int main()
{
    int n, binNum;

    cout << "Enter a decimal number: ";
    cin >> n;
    binNum = DecimalToBinary(n);
    cout << n << " in decimal = " << binNum << " in binary" << endl ;
    return 0;
}

long long DecimalToBinary(int n)
{
    long long binNum = 0;
    int rem, i = 1, step = 1;

    while (n!=0)
    {
        rem = n%2;
        cout << "Step " << step++ << ": " << n << "/2, Remainder = " << rem << ", Quotient = " << n/2 << endl;
        n /= 2;
        binNum += rem*i;
        i *= 10;
    }
    return binNum;
}
/////////////////////////////////////////////////
24>WAP to Factorial of a Number Using Recursion
->

#include<iostream>
using namespace std;

int factorial(int n);

int main()
{
    int n;

    cout << "Enter a number: ";
    cin >> n;

    cout << "Factorial of " << n << " = " << factorial(n);

    return 0;
}

int factorial(int n)
{
    if(n > 1)
        return n * factorial(n - 1);
    else
        return 1;
}

////////////////////////////////////////////////////
25>WAP to Convert Decimal to Octal

->
#include <iostream>
#include <cmath>

using namespace std;

int BinarytoOctal(long long);
int main()
{
    long long binNum;

    cout << "Enter a binary number: ";
    cin >> binNum;

    cout << binNum << " in binary = " << BinarytoOctal(binNum) << " in octal ";

    return 0;
}

int convertBinarytoOctal(long long binaryNumber)
{
    int octalNumber = 0, decNum = 0, i = 0;

    while(binNum != 0)
    {
        decNum += (binNum%10) * pow(2,i);
        ++i;
        binNum/=10;
    }

    i = 1;

    while (decNum != 0)
    {
        octalNumber += (decNum % 8) * i;
        decNum /= 8;
        i *= 10;
    }

    return octalNumber;
}

//////////////////////////////////////////////////////
26>WAP to Convert Binary to Octal
->

#include <iostream>
#include <cmath>

using namespace std;

int convertBinarytoOctal(long long);
int main()
{
    long long binaryNumber;

    cout << "Enter a binary number: ";
    cin >> binaryNumber;

    cout << binaryNumber << " in binary = " << BinarytoOctal(binaryNumber) << " in octal ";

    return 0;
}

int BinarytoOctal(long long binaryNumber)
{
    int octalNumber = 0, decimalNumber = 0, i = 0;

    while(binaryNumber != 0)
    {
        decimalNumber += (binaryNumber%10) * pow(2,i);
        ++i;
        binaryNumber/=10;
    }

    i = 1;

    while (decimalNumber != 0)
    {
        octalNumber += (decimalNumber % 8) * i;
        decimalNumber /= 8;
        i *= 10;
    }

    return octalNumber;
}

////////////////////////////////////////////////